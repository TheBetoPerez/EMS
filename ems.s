;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_get_pad_new
	.export		_p2
	.export		_p2val
	.export		_p2reg
	.export		_pad1
	.export		_pad1Next
	.export		_test_ctr
	.export		_palSprites
	.export		_palette
	.export		_i
	.export		_j
	.export		_spr
	.export		_menuIndexH
	.export		_menuIndexV
	.export		_cursorX
	.export		_cursorY
	.export		_rom_addresses
	.export		_put_str
	.export		_handleMenuInput
	.export		_main

.segment	"DATA"

_p2val:
	.byte	$00
_p2reg:
	.byte	$00
_pad1:
	.byte	$00
_pad1Next:
	.byte	$00
_test_ctr:
	.word	$0000
_j:
	.byte	$00
_spr:
	.byte	$00
_menuIndexH:
	.byte	$00
_menuIndexV:
	.byte	$00
_cursorX:
	.byte	$00
_cursorY:
	.byte	$37
_rom_addresses:
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8

.segment	"RODATA"

_palSprites:
	.byte	$0F
	.byte	$15
	.byte	$26
	.byte	$11
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$15
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$19
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$38
_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
L00CD:
	.byte	$53,$55,$50,$45,$52,$20,$4D,$41,$52,$49,$4F,$20,$42,$52,$4F,$53
	.byte	$00
L0103:
	.byte	$33,$20,$4D,$53,$42,$20,$4F,$46,$20,$34,$30,$31,$37,$3A,$00
L00F1:
	.byte	$53,$55,$50,$45,$52,$20,$4D,$41,$52,$49,$4F,$20,$33,$00
L00DF:
	.byte	$46,$49,$4E,$41,$4C,$20,$46,$41,$4E,$54,$41,$53,$59,$00
L00E8:
	.byte	$4E,$49,$4E,$4A,$41,$20,$47,$41,$49,$44,$45,$4E,$00
L00AF:
	.byte	$56,$49,$44,$45,$4F,$20,$4D,$4F,$44,$45,$3A,$00
L00D6:
	.byte	$4D,$45,$47,$41,$20,$4D,$41,$4E,$20,$32,$00
L00A6:
	.byte	$47,$4F,$20,$47,$41,$54,$4F,$52,$53,$21,$00
L00FA:
	.byte	$54,$45,$54,$52,$49,$53,$00
L00BA:
	.byte	$4E,$54,$53,$43,$00
L00C4:
	.byte	$50,$41,$4C,$00

.segment	"BSS"

_p2:
	.res	2,$00
_ball_x:
	.res	8,$00
_ball_y:
	.res	8,$00
_ball_dx:
	.res	8,$00
_ball_dy:
	.res	8,$00
_i:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ put_str (unsigned int, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str: near

.segment	"CODE"

;
; void put_str(unsigned int adr, const char* str){
;
	jsr     pushax
;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if(!*str)break;
;
L003E:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	beq     L003F
;
; vram_put((*str++));
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0047
	inx
L0047:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; while(1){
;
	jmp     L003E
;
; }
;
L003F:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ handleMenuInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleMenuInput: near

.segment	"CODE"

;
; if((pad1Next & PAD_UP) && menuIndexV){ 
;
	lda     _pad1Next
	and     #$08
	beq     L0171
	lda     _menuIndexV
	beq     L0171
;
; cursorY -= 16;
;
	lda     _cursorY
	sec
	sbc     #$10
	sta     _cursorY
;
; --menuIndexV;
;
	dec     _menuIndexV
;
; if((pad1Next & PAD_DOWN) && (menuIndexV < 3)){ 
;
L0171:	lda     _pad1Next
	and     #$04
	beq     L0175
	lda     _menuIndexV
	cmp     #$03
	bcs     L0175
;
; cursorY += 16;
;
	lda     #$10
	clc
	adc     _cursorY
	sta     _cursorY
;
; ++menuIndexV;
;
	inc     _menuIndexV
;
; if((pad1Next & PAD_LEFT) && menuIndexH){
;
L0175:	lda     _pad1Next
	and     #$02
	beq     L0179
	lda     _menuIndexH
	beq     L0179
;
; cursorX -= 136;
;
	lda     _cursorX
	sec
	sbc     #$88
	sta     _cursorX
;
; --menuIndexH;
;
	dec     _menuIndexH
;
; if((pad1Next & PAD_RIGHT) && !menuIndexH){
;
L0179:	lda     _pad1Next
	and     #$01
	beq     L017B
	lda     _menuIndexH
	beq     L017C
L017B:	rts
;
; cursorX += 136;
;
L017C:	lda     #$88
	clc
	adc     _cursorX
	sta     _cursorX
;
; ++menuIndexH;
;
	inc     _menuIndexH
;
; *p2 = 0x09;
;
	lda     _p2+1
	sta     ptr1+1
	lda     _p2
	sta     ptr1
	lda     #$09
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; unsigned char rom_index = 0;
;
	lda     #$00
	jsr     pusha
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; for(i = 0;i < BALLS_MAX; ++i){
;
	lda     #$00
	sta     _i
L0184:	lda     _i
	cmp     #$08
	jcs     L0072
;
; ball_x[i] = rand8();
;
	lda     #<(_ball_x)
	ldx     #>(_ball_x)
	clc
	adc     _i
	bcc     L007B
	inx
L007B:	jsr     pushax
	jsr     _rand8
	ldy     #$00
	jsr     staspidx
;
; ball_y[i] = rand8();
;
	lda     #<(_ball_y)
	ldx     #>(_ball_y)
	clc
	adc     _i
	bcc     L007F
	inx
L007F:	jsr     pushax
	jsr     _rand8
	ldy     #$00
	jsr     staspidx
;
; j = rand8();
;
	jsr     _rand8
	sta     _j
;
; spr = 1 + (rand8() % 3);
;
	jsr     _rand8
	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	clc
	adc     #$01
	sta     _spr
;
; ball_dx[i] = j & 1? -spr:spr;
;
	lda     #<(_ball_dx)
	ldx     #>(_ball_dx)
	clc
	adc     _i
	bcc     L0089
	inx
L0089:	sta     ptr1
	stx     ptr1+1
	lda     _j
	and     #$01
	beq     L0185
	lda     _spr
	eor     #$FF
	clc
	adc     #$01
	jmp     L0187
L0185:	lda     _spr
L0187:	ldy     #$00
	sta     (ptr1),y
;
; spr = 1 + (rand8() % 3);
;
	jsr     _rand8
	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	clc
	adc     #$01
	sta     _spr
;
; ball_dy[i] = j & 1? -spr:spr;
;
	lda     #<(_ball_dy)
	ldx     #>(_ball_dy)
	clc
	adc     _i
	bcc     L0095
	inx
L0095:	sta     ptr1
	stx     ptr1+1
	lda     _j
	and     #$01
	beq     L0188
	lda     _spr
	eor     #$FF
	clc
	adc     #$01
	jmp     L018A
L0188:	lda     _spr
L018A:	ldy     #$00
	sta     (ptr1),y
;
; for(i = 0;i < BALLS_MAX; ++i){
;
	inc     _i
	jmp     L0184
;
; pal_bg(palette); // load the BG palette
;
L0072:	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; put_str(NTADR_A(1, 2), "GO GATORS!");
;
	ldx     #$20
	lda     #$41
	jsr     pushax
	lda     #<(L00A6)
	ldx     #>(L00A6)
	jsr     _put_str
;
; put_str(NTADR_A(1, 4), "VIDEO MODE:");
;
	ldx     #$20
	lda     #$81
	jsr     pushax
	lda     #<(L00AF)
	ldx     #>(L00AF)
	jsr     _put_str
;
; if(ppu_system()) put_str(NTADR_A(1, 5), "NTSC");
;
	jsr     _ppu_system
	tax
	beq     L00B1
	ldx     #$20
	lda     #$A1
	jsr     pushax
	lda     #<(L00BA)
	ldx     #>(L00BA)
;
; else put_str(NTADR_A(1, 5), "PAL");
;
	jmp     L0182
L00B1:	ldx     #$20
	lda     #$A1
	jsr     pushax
	lda     #<(L00C4)
	ldx     #>(L00C4)
L0182:	jsr     _put_str
;
; put_str(NTADR_A(1, 7), "SUPER MARIO BROS");
;
	ldx     #$20
	lda     #$E1
	jsr     pushax
	lda     #<(L00CD)
	ldx     #>(L00CD)
	jsr     _put_str
;
; put_str(NTADR_A(1, 9), "MEGA MAN 2");
;
	ldx     #$21
	txa
	jsr     pushax
	lda     #<(L00D6)
	ldx     #>(L00D6)
	jsr     _put_str
;
; put_str(NTADR_A(1, 11), "FINAL FANTASY");
;
	ldx     #$21
	lda     #$61
	jsr     pushax
	lda     #<(L00DF)
	ldx     #>(L00DF)
	jsr     _put_str
;
; put_str(NTADR_A(1, 13), "NINJA GAIDEN");
;
	ldx     #$21
	lda     #$A1
	jsr     pushax
	lda     #<(L00E8)
	ldx     #>(L00E8)
	jsr     _put_str
;
; put_str(NTADR_A(18, 7), "SUPER MARIO 3");
;
	ldx     #$20
	lda     #$F2
	jsr     pushax
	lda     #<(L00F1)
	ldx     #>(L00F1)
	jsr     _put_str
;
; put_str(NTADR_A(18, 9), "TETRIS");
;
	ldx     #$21
	lda     #$32
	jsr     pushax
	lda     #<(L00FA)
	ldx     #>(L00FA)
	jsr     _put_str
;
; put_str(NTADR_A(1, 16), "3 MSB OF 4017:");
;
	ldx     #$22
	lda     #$01
	jsr     pushax
	lda     #<(L0103)
	ldx     #>(L0103)
	jsr     _put_str
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0106:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; for(i = 0; i < BALLS_MAX; ++i){
;
	sta     _i
L018B:	lda     _i
	cmp     #$08
	jcs     L010F
;
; if(i % 2) oam_spr(ball_x[i], ball_y[i], 0x55, i % 4);
;
	and     #$01
	beq     L0116
	jsr     decsp3
	ldy     _i
	lda     _ball_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _ball_y,y
	ldy     #$01
	sta     (sp),y
	lda     #$55
;
; else oam_spr(ball_x[i], ball_y[i], 0x46, i % 4);
;
	jmp     L0190
L0116:	jsr     decsp3
	ldy     _i
	lda     _ball_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _ball_y,y
	ldy     #$01
	sta     (sp),y
	lda     #$46
L0190:	dey
	sta     (sp),y
	lda     _i
	and     #$03
	jsr     _oam_spr
;
; ball_x[i] += ball_dx[i];
;
	lda     #<(_ball_x)
	ldx     #>(_ball_x)
	clc
	adc     _i
	bcc     L012D
	inx
L012D:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _i
	lda     _ball_dx,y
	clc
	adc     ptr1
	ldy     #$00
	jsr     staspidx
;
; ball_y[i] += ball_dy[i];
;
	lda     #<(_ball_y)
	ldx     #>(_ball_y)
	clc
	adc     _i
	bcc     L0133
	inx
L0133:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _i
	lda     _ball_dy,y
	clc
	adc     ptr1
	ldy     #$00
	jsr     staspidx
;
; if(ball_x[i]>=(256-8)) ball_dx[i]=-ball_dx[i];
;
	ldy     _i
	lda     _ball_x,y
	cmp     #$F8
	bcc     L0137
	lda     #<(_ball_dx)
	ldx     #>(_ball_dx)
	clc
	adc     _i
	bcc     L013E
	inx
L013E:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _ball_dx,y
	eor     #$FF
	clc
	adc     #$01
	ldy     #$00
	sta     (ptr1),y
;
; if(ball_y[i]>=(240-8)) ball_dy[i]=-ball_dy[i];
;
L0137:	ldy     _i
	lda     _ball_y,y
	cmp     #$E8
	bcc     L018C
	lda     #<(_ball_dy)
	ldx     #>(_ball_dy)
	clc
	adc     _i
	bcc     L0149
	inx
L0149:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _ball_dy,y
	eor     #$FF
	clc
	adc     #$01
	ldy     #$00
	sta     (ptr1),y
;
; for(i = 0; i < BALLS_MAX; ++i){
;
L018C:	inc     _i
	jmp     L018B
;
; oam_spr(cursorX, cursorY, 0x7F, 0x00);
;
L010F:	jsr     decsp3
	lda     _cursorX
	ldy     #$02
	sta     (sp),y
	lda     _cursorY
	dey
	sta     (sp),y
	lda     #$7F
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1Next = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1Next
;
; handleMenuInput();
;
	jsr     _handleMenuInput
;
; rom_index = (unsigned char)((menuIndexH * 4) + menuIndexV);
;
	lda     _menuIndexH
	asl     a
	asl     a
	clc
	adc     _menuIndexV
	ldy     #$00
	sta     (sp),y
;
; p2val = rom_addresses[rom_index];
;
	tay
	lda     _rom_addresses,y
	sta     _p2val
;
; *p2 = p2val;
;
	lda     _p2+1
	sta     ptr1+1
	lda     _p2
	sta     ptr1
	lda     _p2val
	ldy     #$00
	sta     (ptr1),y
;
; p2val = *p2;
;
	lda     _p2+1
	sta     ptr1+1
	lda     _p2
	sta     ptr1
	lda     (ptr1),y
	sta     _p2val
;
; p2val &= 0x0F;
;
	and     #$0F
	sta     _p2val
;
; p2val += 0x30;
;
	lda     #$30
	clc
	adc     _p2val
	sta     _p2val
;
; oam_spr(0x80, 0x80, p2val, 0x0);
;
	jsr     decsp3
	lda     #$80
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     _p2val
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; while (1){
;
	jmp     L0106

.endproc

